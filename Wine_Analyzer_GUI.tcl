#############################################################################
# Generated by PAGE version 4.9
# in conjunction with Tcl version 8.6
set vTcl(timestamp) ""




#############################################################################
## vTcl Code to Load Stock Images


if {![info exist vTcl(sourcing)]} {
#############################################################################
## Procedure:  vTcl:rename

proc ::vTcl:rename {name} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.
    regsub -all "\\." $name "_" ret
    regsub -all "\\-" $ret "_" ret
    regsub -all " " $ret "_" ret
    regsub -all "/" $ret "__" ret
    regsub -all "::" $ret "__" ret

    return [string tolower $ret]
}

#############################################################################
## Procedure:  vTcl:image:create_new_image

proc ::vTcl:image:create_new_image {filename {description {no description}} {type {}} {data {}}} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.
    # Does the image already exist?
    if {[info exists ::vTcl(images,files)]} {
        if {[lsearch -exact $::vTcl(images,files) $filename] > -1} { return }
    }
    if {![info exists ::vTcl(sourcing)] && [string length $data] > 0} {
        set object [image create  [vTcl:image:get_creation_type $filename]  -data $data]
    } else {
        # Wait a minute... Does the file actually exist?
        if {! [file exists $filename] } {
            # Try current directory
            set script [file dirname [info script]]
            set filename [file join $script [file tail $filename] ]
        }

        if {![file exists $filename]} {
            set description "file not found!"
            ## will add 'broken image' again when img is fixed, for
            ## now create empty
            set object [image create photo -width 1 -height 1]
        } else {
            set object [image create  [vTcl:image:get_creation_type $filename]  -file $filename]
        }
    }

    set reference [vTcl:rename $filename]
    set ::vTcl(images,$reference,image)       $object
    set ::vTcl(images,$reference,description) $description
    set ::vTcl(images,$reference,type)        $type
    set ::vTcl(images,filename,$object)       $filename

    lappend ::vTcl(images,files) $filename
    lappend ::vTcl(images,$type) $object
    set ::vTcl(imagefile,$object) $filename   ;# Rozen
    # return image name in case caller might want it
    return $object
}

#############################################################################
## Procedure:  vTcl:image:get_image

proc ::vTcl:image:get_image {filename} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    set reference [vTcl:rename $filename]

    # Let's do some checking first
    if {![info exists ::vTcl(images,$reference,image)]} {
        # Well, the path may be wrong; in that case check
        # only the filename instead, without the path.

        set imageTail [file tail $filename]

        foreach oneFile $::vTcl(images,files) {
            if {[file tail $oneFile] == $imageTail} {
                set reference [vTcl:rename $oneFile]
                break
            }
        }
    }
    # Rozen. There follows a hack in case one wants to rerun a tcl
    # file which contains a file name where an image is expected.
    if {![info exists ::vTcl(images,$reference,image)]} {
        set ::vTcl(images,$reference,image)  [vTcl:image:create_new_image $filename]
    }
    return $::vTcl(images,$reference,image)
}

#############################################################################
## Procedure:  vTcl:image:get_creation_type

proc ::vTcl:image:get_creation_type {filename} {
    ## This procedure may be used free of restrictions.
    ##    Exception added by Christian Gavin on 08/08/02.
    ## Other packages and widget toolkits have different licensing requirements.
    ##    Please read their license agreements for details.

    switch [string tolower [file extension $filename]] {
        .ppm -
        .jpg -
        .bmp -
        .gif    {return photo}
        .xbm    {return bitmap}
        default {return photo}
    }
}

foreach img {


            } {
    eval set _file [lindex $img 0]
    vTcl:image:create_new_image\
        $_file [lindex $img 1] [lindex $img 2] [lindex $img 3]
}

}
#############################################################################
## vTcl Code to Load User Images

catch {package require Img}

foreach img {

        {{$[pwd]/logo_full.2.png} {user image} user {}}

            } {
    eval set _file [lindex $img 0]
    vTcl:image:create_new_image\
        $_file [lindex $img 1] [lindex $img 2] [lindex $img 3]
}

set vTcl(actual_gui_bg) #d9d9d9
set vTcl(actual_gui_fg) #000000
set vTcl(actual_gui_menu_bg) #d9d9d9
set vTcl(actual_gui_menu_fg) #000000
set vTcl(complement_color) #d9d9d9
set vTcl(analog_color_p) #d9d9d9
set vTcl(analog_color_m) #d9d9d9
set vTcl(active_fg) #000000
set vTcl(actual_gui_menu_active_bg)  #d8d8d8
set vTcl(active_menu_fg) #000000
#############################################################################
##vTcl Code to Load User Fonts

"vTcl:font:add_font \ -family {Segoe UI} -size 9 -weight bold -slant roman -underline 0 -overstrike 0" \
    user \
   vTcl:font9
#################################
#LIBRARY PROCEDURES
#


if {[info exists vTcl(sourcing)]} {

proc vTcl:project:info {} {
    set base .top37
    namespace eval ::widgets::$base {
        set dflt,origin 0
        set runvisible 1
    }
    set site_3_0 $base.fra38
    set site_3_0 $base.m48
    set site_3_0 $base.m48
    set site_3_0 $base.fra62
    namespace eval ::widgets_bindings {
        set tagslist _TopLevel
    }
    namespace eval ::vTcl::modules::main {
        set procs {
        }
        set compounds {
        }
        set projectType single
    }
}
}

#################################
# USER DEFINED PROCEDURES
#

#################################
# GENERATED GUI PROCEDURES
#

proc vTclWindow.top37 {base} {
    if {$base == ""} {
        set base .top37
    }
    if {[winfo exists $base]} {
        wm deiconify $base; return
    }
    set top $base
    ###################
    # CREATING WIDGETS
    ###################
    vTcl::widgets::core::toplevel::createCmd $top -class Toplevel \
        -background {#60b0f4} 
    wm focusmodel $top passive
    wm geometry $top 841x722+459+58
    update
    # set in toplevel.wgt.
    global vTcl
    set vTcl(save,dflt,origin) 0
    wm maxsize $top 1916 1033
    wm minsize $top 120 1
    wm overrideredirect $top 0
    wm resizable $top 1 1
    wm deiconify $top
    wm title $top ""Wine Analyzer" by Ibis Malko"
    vTcl:DefineAlias "$top" "Login_LVC" vTcl:Toplevel:WidgetProc "" 1
    frame $top.fra38 \
        -borderwidth 4 -relief groove -background {#d9d9d9} -height 391 \
        -width 395 
    vTcl:DefineAlias "$top.fra38" "Frame_Login" vTcl:WidgetProc "Login_LVC" 1
    set site_3_0 $top.fra38
    entry $site_3_0.ent41 \
        -background white -disabledforeground {#a3a3a3} -font TkFixedFont \
        -foreground {#000000} -insertbackground black -width 254 
    vTcl:DefineAlias "$site_3_0.ent41" "Entry_Email" vTcl:WidgetProc "Login_LVC" 1
    entry $site_3_0.ent46 \
        -background white -disabledforeground {#a3a3a3} -font TkFixedFont \
        -foreground {#000000} -insertbackground black 
    vTcl:DefineAlias "$site_3_0.ent46" "Entry_Password" vTcl:WidgetProc "Login_LVC" 1
    ttk::style configure TButton -background #d9d9d9
    ttk::style configure TButton -foreground #000000
    ttk::style configure TButton -font TkDefaultFont
    ttk::button $site_3_0.cpd47 \
        -takefocus {} -text Exit 
    vTcl:DefineAlias "$site_3_0.cpd47" "Button_Exit" vTcl:WidgetProc "Login_LVC" 1
    ttk::style configure TButton -background #d9d9d9
    ttk::style configure TButton -foreground #000000
    ttk::style configure TButton -font TkDefaultFont
    ttk::button $site_3_0.cpd50 \
        -takefocus {} -text Login 
    vTcl:DefineAlias "$site_3_0.cpd50" "Button_Login" vTcl:WidgetProc "Login_LVC" 1
    ttk::label $site_3_0.tLa52 \
        -background {#d9d9d9} -foreground {#000000} -relief flat \
        -justify center \
        -image [vTcl:image:get_image [file join D:/ BUS110AProject logo_full.2.png]] 
    vTcl:DefineAlias "$site_3_0.tLa52" "TLabel1" vTcl:WidgetProc "Login_LVC" 1
    label $site_3_0.lab53 \
        -background {#d9d9d9} -disabledforeground {#a3a3a3} \
        -foreground {#000000} -text E-Mail 
    vTcl:DefineAlias "$site_3_0.lab53" "Label1" vTcl:WidgetProc "Login_LVC" 1
    label $site_3_0.lab54 \
        -background {#d9d9d9} -disabledforeground {#a3a3a3} \
        -foreground {#000000} -text Password 
    vTcl:DefineAlias "$site_3_0.lab54" "Label2" vTcl:WidgetProc "Login_LVC" 1
    message $site_3_0.mes55 \
        -background {#d9d9d9} -font $::vTcl(fonts,vTcl:font9,object) \
        -foreground {#000000} -highlightbackground {#d9d9d9} \
        -highlightcolor black -text {Please Login!} -width 320 
    vTcl:DefineAlias "$site_3_0.mes55" "Message_Login" vTcl:WidgetProc "Login_LVC" 1
    place $site_3_0.ent41 \
        -in $site_3_0 -x 110 -y 240 -width 250 -relwidth 0 -height 20 \
        -relheight 0 -anchor nw -bordermode ignore 
    place $site_3_0.ent46 \
        -in $site_3_0 -x 110 -y 280 -width 250 -relwidth 0 -height 20 \
        -relheight 0 -anchor nw -bordermode ignore 
    place $site_3_0.cpd47 \
        -in $site_3_0 -x 210 -y 320 -width 156 -relwidth 0 -height 45 \
        -relheight 0 -anchor nw -bordermode inside 
    place $site_3_0.cpd50 \
        -in $site_3_0 -x 20 -y 320 -width 156 -height 45 -anchor nw \
        -bordermode inside 
    place $site_3_0.tLa52 \
        -in $site_3_0 -x 20 -y 20 -width 362 -relwidth 0 -height 179 \
        -relheight 0 -anchor nw -bordermode ignore 
    place $site_3_0.lab53 \
        -in $site_3_0 -x 40 -y 240 -anchor nw -bordermode ignore 
    place $site_3_0.lab54 \
        -in $site_3_0 -x 40 -y 280 -anchor nw -bordermode ignore 
    place $site_3_0.mes55 \
        -in $site_3_0 -x 40 -y 210 -width 320 -relwidth 0 -height 23 \
        -relheight 0 -anchor nw -bordermode ignore 
    menu $top.m48 \
        -activebackground {#d8d8d8} -activeforeground {#000000} \
        -background {#d9d9d9} -font TkMenuFont -foreground {#000000} \
        -tearoff 0 
    $top.m48 add cascade \
        -menu "$top.m48.men57" -activebackground {#d9d9d9} \
        -activeforeground {#000000} -background {#d9d9d9} -command {} \
        -font TkMenuFont -foreground {#000000} -label Preference \
        -state disabled 
    set site_3_0 $top.m48
    menu $site_3_0.men57 \
        -activebackground {#f9f9f9} -activeforeground black \
        -background {#d9d9d9} -font {{Segoe UI} 9} -foreground black \
        -tearoff 0 
    $site_3_0.men57 add radiobutton \
        -value red -variable selectedButton -activebackground {#d8d8d8} \
        -activeforeground {#000000} -background {#d9d9d9} -command {# TODO} \
        -font TkMenuFont -foreground {#000000} -hidemargin 1 \
        -label {Red Wine} -state normal 
    $site_3_0.men57 add radiobutton \
        -value white -variable selectedButton -activebackground {#d8d8d8} \
        -activeforeground {#000000} -background {#d9d9d9} -command {# TODO} \
        -font TkMenuFont -foreground {#000000} -hidemargin 0 \
        -label {White Wine} -state normal 
    $top.m48 add cascade \
        -menu "$top.m48.men58" -activebackground {#d9d9d9} \
        -activeforeground {#000000} -background {#d9d9d9} -command {} \
        -font TkMenuFont -foreground {#000000} -label User -state disabled 
    set site_3_0 $top.m48
    menu $site_3_0.men58 \
        -activebackground {#f9f9f9} -activeforeground black \
        -background {#d9d9d9} -font {{Segoe UI} 9} -foreground black \
        -tearoff 0 
    $site_3_0.men58 add command \
        -activebackground {#d8d8d8} -activeforeground {#000000} \
        -background {#d9d9d9} -command {# TODO} -font TkMenuFont \
        -foreground {#000000} -label {Register New User} -state normal 
    $site_3_0.men58 add command \
        -activebackground {#d8d8d8} -activeforeground {#000000} \
        -background {#d9d9d9} -command {# TODO} -font TkMenuFont \
        -foreground {#000000} -label Logoff -state normal 
    $top.m48 add command \
        -activebackground {#d8d8d8} -activeforeground {#000000} \
        -background {#d9d9d9} -command {# TODO} -font TkMenuFont \
        -foreground {#000000} -label Exit -state normal 
    frame $top.fra62 \
        -borderwidth 2 -relief groove -background {#d9d9d9} -height 595 \
        -width 715 
    vTcl:DefineAlias "$top.fra62" "Frame3" vTcl:WidgetProc "Login_LVC" 1
    set site_3_0 $top.fra62
    ttk::label $site_3_0.cpd63 \
        -background {#d9d9d9} -foreground {#000000} -relief flat \
        -justify center \
        -image [vTcl:image:get_image [file join D:/ BUS110AProject logo_full.2.png]] 
    vTcl:DefineAlias "$site_3_0.cpd63" "TLabel2" vTcl:WidgetProc "Login_LVC" 1
    vTcl::widgets::ttk::custom::CreateCmd $site_3_0.cus68 \
        -background {#d9d9d9} -height 379 -highlightbackground {#d9d9d9} \
        -highlightcolor black -width 694 
    vTcl:DefineAlias "$site_3_0.cus68" "User_Console" vTcl:WidgetProc "Login_LVC" 1
    place $site_3_0.cpd63 \
        -in $site_3_0 -x 170 -y 10 -width 362 -height 179 -anchor nw \
        -bordermode inside 
    place $site_3_0.cus68 \
        -in $site_3_0 -x 10 -y 200 -width 694 -relwidth 0 -height 379 \
        -relheight 0 -anchor nw -bordermode ignore 
    frame $top.fra70 \
        -background {#60b0f4} -height 645 -width 765 
    vTcl:DefineAlias "$top.fra70" "Frame_Shade" vTcl:WidgetProc "Login_LVC" 1
    ###################
    # SETTING GEOMETRY
    ###################
    place $top.fra38 \
        -in $top -x 220 -y 150 -width 395 -relwidth 0 -height 391 \
        -relheight 0 -anchor nw -bordermode ignore 
    place $top.fra62 \
        -in $top -x 70 -y 50 -width 715 -relwidth 0 -height 595 -relheight 0 \
        -anchor nw -bordermode ignore 
    place $top.fra70 \
        -in $top -x 40 -y 40 -width 765 -relwidth 0 -height 645 -relheight 0 \
        -anchor nw -bordermode ignore 

    vTcl:FireEvent $base <<Ready>>
}

#############################################################################
## Binding tag:  _TopLevel

bind "_TopLevel" <<Create>> {
    if {![info exists _topcount]} {set _topcount 0}; incr _topcount
}
bind "_TopLevel" <<DeleteWindow>> {
    if {[set ::%W::_modal]} {
                vTcl:Toplevel:WidgetProc %W endmodal
            } else {
                destroy %W; if {$_topcount == 0} {exit}
            }
}
bind "_TopLevel" <Destroy> {
    if {[winfo toplevel %W] == "%W"} {incr _topcount -1}
}

Window show .
Window show .top37

